# frozen_string_literal: true

require 'dotenv'

default_platform(:ios)

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
APP_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'ios', 'App')
BUNDLE_IDENTIFIER = 'com.ellavandurpe.blocknotes'

ENV_FILE_NAME = 'blocknotes.env'
USER_ENV_FILE_PATH = File.join(Dir.home, '.a8c-apps', ENV_FILE_NAME)

# Notice this import currently needsto be after the USER_ENV_FILE_PATH definition because the const is used by the helpers.
import 'lib/helpers.rb'

before_all do
  Dotenv.load(USER_ENV_FILE_PATH)
end

platform :ios do
  desc 'Builds and uploads Blocknotes to TestFlight'
  lane :build_and_upload_to_testflight do
    build_for_app_store
    upload_to_testflight(api_key: app_store_connect_api_key)
  end

  desc 'Builds the app for App Store distribution'
  lane :build_for_app_store do |options|
    set_up_code_signing unless options[:skip_code_signing_setup]

    latest_build_number = latest_testflight_build_number(
      app_identifier: BUNDLE_IDENTIFIER,
      api_key: app_store_connect_api_key
    )

    increment_build_number(
      xcodeproj: File.join(APP_FOLDER, 'App.xcodeproj'),
      build_number: latest_build_number + 1
    )

    build_app(
      workspace: File.join(APP_FOLDER, 'App.xcworkspace'),
      output_directory: File.join(APP_FOLDER, 'build'),
      scheme: 'Blocknotes',
      export_options: {
        method: 'app-store',
        provisioningProfiles: {
          BUNDLE_IDENTIFIER => "match AppStore #{BUNDLE_IDENTIFIER}"
        }
      }
    )
  end

  desc 'Sets up code signing'
  lane :set_up_code_signing do |options|
    require_env_vars!(*ASC_API_KEY_ENV_VARS, *MATCH_ENV_VARS)

    setup_ci

    sync_code_signing(
      type: 'appstore',
      app_identifier: BUNDLE_IDENTIFIER,
      team_id: 'PZYM8XX95Q',
      api_key: app_store_connect_api_key,
      storage_mode: 's3',
      s3_region: 'us-east-2',
      s3_bucket: 'a8c-fastlane-match',
      readonly: options.fetch(:readonly, true)
    )
  end
end
